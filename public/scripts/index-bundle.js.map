{"version":3,"file":"index-bundle.js","mappings":"mBACA,IAAIA,EAAY,GAwChBA,EArCoBC,MAChB,MAAMC,EAAcC,aAAaC,QAAQ,aAEzC,IACI,OAAOF,EAAcG,KAAKC,MAAMJ,GAAe,EACnD,CAAE,MAAOK,GACL,MAAO,EACX,GA8BQN,GAGZ,MAAMO,EAAS,WAGXR,EAAUS,MAAK,SAAUC,EAAGC,GACxB,OAAID,EAAEE,SAASF,EAAEG,UAAYF,EAAEC,SAASD,EAAEE,UAC/B,EAGPH,EAAEE,SAASF,EAAEG,UAAYF,EAAEC,SAASD,EAAEE,WAC9B,EAGRH,EAAEE,SAASF,EAAEG,YAAcF,EAAEC,SAASD,EAAEE,UACjC,OADX,CAIJ,IAGA,MAAMC,EAAgBC,SAASC,cAAc,kBAC7CF,EAAcG,UAAY,GAG1BjB,EAAUkB,SAASC,IAEf,MAAMC,EAAaL,SAASM,cAAc,OAC1CD,EAAWE,YAAe,GAAEH,EAAOP,YAAYO,EAAON,YACtDO,EAAWG,UAAUC,IAAI,QACzBV,EAAcW,YAAYL,GAC1B,IAAIM,EAAKP,EAAOO,GAChBN,EAAWO,aAAa,KAAMD,EAAG,IAKlBX,SAASa,iBAAiB,SAElCV,SAASW,IAEhB,MAAMC,EAAef,SAASM,cAAc,UAC5CS,EAAaH,aAAa,OAAQ,UAClCG,EAAaR,YAAc,OAC3BQ,EAAaP,UAAUC,IAAI,eAC3BK,EAAWJ,YAAYK,GAGPf,SAASa,iBAAiB,gBAElCV,SAAQ,SAASa,GACrBA,EAAOC,iBAAiB,SAAS,SAAUzB,GAC3CA,EAAE0B,iBACF,IAAIC,EAAQ3B,EAAE4B,OAAOC,WAAWV,GAChCvB,aAAakC,QAAQ,QAASH,GAC9BI,SAASC,OAAO,aAChB,GACJ,GAAE,GAIV,EAIMC,EAAQxC,EAAUyC,KAAKC,GAASA,EAAK7B,YAC3C8B,QAAQC,IAAIJ,GAGZG,QAAQC,IAAI5C,GC3GZQ,IAGAO,SAASC,cAAc,iBAAiBgB,iBAAiB,UAAU,SAAUzB,GAC3EA,EAAE0B,iBACF,IAAIY,EAAU9B,SAASC,cAAc,cAAc8B,MAC/CC,EAAUhC,SAASC,cAAc,cAAc8B,MAC/CE,EAAMjC,SAASC,cAAc,gBAAgB8B,MAC7CR,EAAWvB,SAASC,cAAc,eAAe8B,MACjDG,EAAYlC,SAASa,iBAAiB,iBAEtCiB,EAAQK,OAAS,GAAKH,EAAQG,OAAS,GAAY,IAAPF,GAAaV,EAASY,OAAS,EAC7EC,MAAM,8BACGH,EAAM,GACfG,MAAM,sBDMKC,EAACP,EAASE,EAASC,EAAKV,KACnC,MAAMZ,EAAK,KAAO2B,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAEnDxD,EAAUyD,QACN,CACI/B,GAAIA,EACJb,UAAWgC,EACXjC,SAAUmC,EACVC,IAAKA,EACLV,SAAUA,IAjBlBnC,aAAakC,QAAQ,YAAahC,KAAKqD,UAAU1D,GAoBtC,EChBXoD,CAAOP,EAASE,EAASC,EAAKV,GAC9B9B,KAEFyC,EAAU/B,SAAQyC,GAAeA,EAAYb,MAAQ,IAEvD,G","sources":["webpack://playground-two/./src/functions.js","webpack://playground-two/./src/index.js"],"sourcesContent":["//create array\r\nlet newMember = []\r\n\r\n// Read existing notes from local storage,\r\nconst loadMembers = () => {\r\n    const membersJSON = localStorage.getItem(\"newMember\")\r\n    \r\n    try {\r\n        return membersJSON ? JSON.parse(membersJSON) : []\r\n    } catch (e) {\r\n        return []\r\n    }   \r\n}\r\n\r\n// save members to localStorage\r\nconst saveMember = () => {\r\n    localStorage.setItem(\"newMember\", JSON.stringify(newMember))\r\n}\r\n\r\n//function to expose array from module / used on site page\r\nconst getMembers = () => newMember\r\n\r\n\r\n//add new object of data to array\r\nconst addNew = (nameOne, nameTwo, age, location) => {\r\n    const id = \"id\" + Math.random().toString(16).slice(2)\r\n    \r\n    newMember.unshift(\r\n        {\r\n            id: id,\r\n            firstName: nameOne,\r\n            lastName: nameTwo,\r\n            age: age,\r\n            location: location\r\n        }\r\n    )\r\n   saveMember()\r\n\r\n}\r\n\r\n//load data from local storage\r\nnewMember = loadMembers()\r\n\r\n//render function to be called when the array is updated or browser refreshes\r\nconst render = function () {\r\n\r\n    ///Sort the array alphabetically\r\n    newMember.sort(function (a, b,) {\r\n        if (a.lastName+a.firstName > b.lastName+b.firstName) {\r\n            return 1\r\n        }\r\n\r\n        if (a.lastName+a.firstName < b.lastName+b.firstName) {\r\n            return -1\r\n        }\r\n\r\n        if (a.lastName+a.firstName === b.lastName+b.firstName) {\r\n            return 0\r\n        }\r\n        \r\n    })\r\n    \r\n    //clear array element so the new data can be displayed\r\n    const selectArrayEl = document.querySelector(\"#array-element\")\r\n    selectArrayEl.innerHTML = ''\r\n    \r\n    //create a seperate div on the page for each member within the array\r\n    newMember.forEach((member) => {\r\n        \r\n        const createDivs = document.createElement('div')\r\n        createDivs.textContent = `${member.lastName} ${member.firstName}`\r\n        createDivs.classList.add(\"divs\")\r\n        selectArrayEl.appendChild(createDivs)\r\n        let id = member.id\r\n        createDivs.setAttribute('id', id)\r\n        \r\n    })\r\n\r\n    // //Create a view button for each newMember div\r\n    const selectDivs = document.querySelectorAll(\".divs\")\r\n\r\n    selectDivs.forEach((selectDivs) => {\r\n       \r\n        const createButton = document.createElement('button')\r\n        createButton.setAttribute('type', 'button')\r\n        createButton.textContent = \"View\"\r\n        createButton.classList.add(\"viewButtons\")\r\n        selectDivs.appendChild(createButton)\r\n\r\n        //create eventlistener for each view button\r\n        const buttons = document.querySelectorAll(\".viewButtons\")\r\n\r\n        buttons.forEach(function(button) {\r\n            button.addEventListener(\"click\", function (e) {\r\n            e.preventDefault()\r\n            let getId = e.target.parentNode.id \r\n            localStorage.setItem(\"getId\", getId)\r\n            location.assign('/site.html')\r\n            })\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\n\r\n//Create list in the console with itemised data from the Array\r\nconst names = newMember.map((item) => item.firstName)\r\nconsole.log(names)\r\n\r\n//Display all information from newMember array in the console\r\nconsole.log(newMember)\r\n\r\nexport { getMembers, render, addNew, saveMember }","\r\nimport { render, addNew } from './functions'\r\n\r\n//render the array\r\nrender()\r\n\r\n//eventhandler for add new member / submit form element\r\ndocument.querySelector(\"#form-element\").addEventListener(\"submit\", function (e) {\r\n  e.preventDefault()\r\n  let nameOne = document.querySelector(\"#input-one\").value \r\n  let nameTwo = document.querySelector(\"#input-two\").value \r\n  let age = document.querySelector(\"#input-three\").value\r\n  let location = document.querySelector(\"#input-four\").value\r\n  let allInputs = document.querySelectorAll(\".inputElField\")\r\n\r\n  if (nameOne.length < 2 || nameTwo.length < 2 || age == \"\" || location.length < 2 ) {\r\n    alert(\"Enter all fields correctly\")\r\n  } else if (age < 18)  {\r\n    alert(\"Minimum age is 18\")\r\n  } else  {\r\n    addNew(nameOne, nameTwo, age, location)\r\n    render()\r\n  }\r\n  allInputs.forEach(singleInput => singleInput.value = '')\r\n\r\n})\r\n\r\n"],"names":["newMember","loadMembers","membersJSON","localStorage","getItem","JSON","parse","e","render","sort","a","b","lastName","firstName","selectArrayEl","document","querySelector","innerHTML","forEach","member","createDivs","createElement","textContent","classList","add","appendChild","id","setAttribute","querySelectorAll","selectDivs","createButton","button","addEventListener","preventDefault","getId","target","parentNode","setItem","location","assign","names","map","item","console","log","nameOne","value","nameTwo","age","allInputs","length","alert","addNew","Math","random","toString","slice","unshift","stringify","singleInput"],"sourceRoot":""}