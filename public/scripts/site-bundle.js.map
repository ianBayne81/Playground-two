{"version":3,"file":"site-bundle.js","mappings":"mBACA,IAAIA,EAAY,GAGhB,MAWMC,EAAaA,KACfC,aAAaC,QAAQ,YAAaC,KAAKC,UAAUL,GAAW,EAyBhEA,EArCoBM,MAChB,MAAMC,EAAcL,aAAaM,QAAQ,aAEzC,IACI,OAAOD,EAAcH,KAAKK,MAAMF,GAAe,EACnD,CAAE,MAAOG,GACL,MAAO,EACX,GA8BQJ,GAGZ,MA+DMK,EAAQX,EAAUY,KAAKC,GAASA,EAAKC,YAC3CC,QAAQC,IAAIL,GAGZI,QAAQC,IAAIhB,GC5GZ,MAAMA,EDiBmBA,ECdnBiB,EAAWf,aAAaM,QAAQ,SAChCU,EAAYC,SAASC,cAAc,cACnCC,EAAYF,SAASC,cAAc,cACnCE,EAAiBH,SAASC,cAAc,gBACxCG,EAAUJ,SAASC,cAAc,eACjCI,EAAQL,SAASC,cAAc,eAC/BK,EAAYN,SAASC,cAAc,cAKjBH,KAEtB,MAAMS,EAAS1B,EAAU2B,MAAMD,GAAWA,EAAOE,KAAOX,IAGlDY,EAAYV,SAASC,cAAc,oBACnCU,EAAaX,SAASY,cAAc,KAC1CD,EAAWE,aAAa,KAAM,cAC9BF,EAAWG,YAAcP,EAAOE,GAChCC,EAAUK,YAAYJ,GAGtBZ,EAAUiB,MAAQT,EAAOZ,UACzBO,EAAUc,MAAQT,EAAOU,SACzBd,EAAea,MAAQT,EAAOW,aAC9Bd,EAAQY,MAAQT,EAAOY,MACvBd,EAAMW,MAAQT,EAAOa,IACrBd,EAAUU,MAAQT,EAAOc,OAAO,EAKlCC,CAAexB,GAuCf,IAAIyB,EAAYvB,SAASwB,iBAAiB,kBAG1CxB,SAASC,cAAc,iBAAiBwB,iBAAiB,UAAU,SAAUlC,GACzEA,EAAEmC,iBAxCeC,EAAClB,EAAImB,KACxB,IAAIrB,EAAS1B,EAAU2B,MAAMD,GAAWA,EAAOE,KAAOA,IAEjDF,IAIDqB,EAAQjC,UAAUkC,OAAS,GAAKD,EAAQX,SAASY,OAAS,GAAKD,EAAQV,aAAaW,OAAS,GAC7FC,MAAM,2DAENvB,EAAOZ,UAAYiC,EAAQjC,UAC3BY,EAAOU,SAAWW,EAAQX,SAC1BV,EAAOW,aAAeU,EAAQV,aAC9BX,EAAOY,MAAQS,EAAQT,MACvBZ,EAAOa,IAAMQ,EAAQR,IACrBb,EAAOc,QAAUO,EAAQP,QACzBvC,IACAgD,MAAM,kBACV,EAuBEH,CAAa7B,EAAU,CACrBH,UAAWI,EAAUiB,MACrBC,SAAUf,EAAUc,MACpBE,aAAcf,EAAea,MAC7BG,MAAOf,EAAQY,MACfI,IAAKf,EAAMW,MACXK,QAASf,EAAUU,OAGvB,IAGFhB,SAASC,cAAc,kBAAkBwB,iBAAiB,SAAS,SAAUlC,GAC3EA,EAAEmC,iBA9BkBjB,KAEpB,IAAIsB,EAAclD,EAAUmD,WAAWzB,GAAWA,EAAOE,KAAOA,IAE5DsB,GAAe,GACflD,EAAUoD,OAAOF,EAAa,GAElCjD,GAAY,EAwBZoD,CAAapC,GACbgC,MAAM,mBACN9B,SAASC,cAAc,eAAekC,UAAY,GAClDZ,EAAUa,SAAQC,GAAeA,EAAYrB,MAAQ,KACrDsB,SAASC,OAAO,cAClB,IAGAvC,SAASC,cAAc,kBAAkBwB,iBAAiB,SAAS,SAAUlC,GAC3EA,EAAEmC,iBACF3C,aAAayD,WAAW,SACxBF,SAASC,OAAO,cAClB,G","sources":["webpack://playground-two/./src/functions.js","webpack://playground-two/./src/site.js"],"sourcesContent":["//create array\r\nlet newMember = []\r\n\r\n// Read existing notes from local storage,\r\nconst loadMembers = () => {\r\n    const membersJSON = localStorage.getItem(\"newMember\")\r\n    \r\n    try {\r\n        return membersJSON ? JSON.parse(membersJSON) : []\r\n    } catch (e) {\r\n        return []\r\n    }   \r\n}\r\n\r\n// save members to localStorage\r\nconst saveMember = () => {\r\n    localStorage.setItem(\"newMember\", JSON.stringify(newMember))\r\n}\r\n\r\n//function to expose array from module / used on site page\r\nconst getMembers = () => newMember\r\n\r\n\r\n//add new object of data to array\r\nconst addNew = (nameOne, nameTwo, mobileNumber, email, dob, address) => {\r\n    const id = \"id\" + Math.random().toString(16).slice(2)\r\n    \r\n    newMember.unshift({\r\n            id: id,\r\n            firstName: nameOne,\r\n            lastName: nameTwo,\r\n            mobileNumber: mobileNumber,\r\n            email: email,\r\n            dob: dob,\r\n            address: address\r\n    })\r\n   saveMember()\r\n\r\n}\r\n\r\n//load data from local storage\r\nnewMember = loadMembers()\r\n\r\n//render function to be called when the array is updated or browser refreshes\r\nconst render = function () {\r\n\r\n    //clear array element so the new data can be displayed\r\n    const selectArrayEl = document.querySelector(\"#array-element\")\r\n    selectArrayEl.innerHTML = ''\r\n\r\n    ///Sort the array alphabetically by last name and then first name\r\n    newMember.sort(function (a, b,) {\r\n        if (a.lastName+a.firstName > b.lastName+b.firstName) {\r\n            return 1\r\n        }\r\n\r\n        if (a.lastName+a.firstName < b.lastName+b.firstName) {\r\n            return -1\r\n        }\r\n\r\n        if (a.lastName+a.firstName === b.lastName+b.firstName) {\r\n            return 0\r\n        }\r\n        \r\n    })\r\n    \r\n    //create a seperate div on the page for each member within the array\r\n    newMember.forEach((member) => {\r\n        \r\n        const createDivs = document.createElement('div')\r\n        createDivs.textContent = `${member.firstName} ${member.lastName}`\r\n        createDivs.classList.add(\"divs\")\r\n        selectArrayEl.appendChild(createDivs)\r\n        let id = member.id\r\n        createDivs.setAttribute('id', id)\r\n        \r\n    })\r\n\r\n    // //Create a view button for each newMember div\r\n    const selectDivs = document.querySelectorAll(\".divs\")\r\n\r\n    selectDivs.forEach((selectDivs) => {\r\n       \r\n        const createButton = document.createElement('button')\r\n        createButton.setAttribute('type', 'button')\r\n        createButton.textContent = \"View\"\r\n        createButton.classList.add(\"viewButtons\")\r\n        selectDivs.appendChild(createButton)\r\n\r\n        //create eventlistener for each view button\r\n        const buttons = document.querySelectorAll(\".viewButtons\")\r\n\r\n        buttons.forEach(function(button) {\r\n            button.addEventListener(\"click\", function (e) {\r\n            e.preventDefault()\r\n            let getId = e.target.parentNode.id \r\n            localStorage.setItem(\"getId\", getId)\r\n            location.assign('/site.html')\r\n            })\r\n        })\r\n\r\n    })\r\n\r\n}\r\n\r\n\r\n//Create list in the console with itemised data from the Array\r\nconst names = newMember.map((item) => item.firstName)\r\nconsole.log(names)\r\n\r\n//Display all information from newMember array in the console\r\nconsole.log(newMember)\r\n\r\nexport { getMembers, render, addNew, saveMember }","import { getMembers, saveMember } from './functions'\r\n\r\n//load newMember data from functions\r\nconst newMember = getMembers()\r\n\r\n//variables used in site\r\nconst memberId = localStorage.getItem(\"getId\")\r\nconst nameOneEl = document.querySelector(\"#input-one\")\r\nconst nameTwoEl = document.querySelector(\"#input-two\")\r\nconst mobileNumberEl = document.querySelector(\"#input-three\")\r\nconst emailEl = document.querySelector(\"#input-four\")\r\nconst dobEl = document.querySelector(\"#input-five\")\r\nconst addressEl = document.querySelector(\"#input-six\")\r\n\r\n\r\n\r\n//render site page data function\r\nconst renderEditPage = (memberId) => {\r\n\r\n  const member = newMember.find((member) => member.id === memberId)\r\n\r\n  //create paragraph for the id and place in the heading element\r\n  const idElement = document.querySelector(\"#heading-element\")\r\n  const createPara = document.createElement(\"p\")\r\n  createPara.setAttribute(\"id\", \"id-heading\")\r\n  createPara.textContent = member.id\r\n  idElement.appendChild(createPara)\r\n  \r\n  //Place member details in the input fields\r\n  nameOneEl.value = member.firstName\r\n  nameTwoEl.value = member.lastName\r\n  mobileNumberEl.value = member.mobileNumber\r\n  emailEl.value = member.email\r\n  dobEl.value = member.dob\r\n  addressEl.value = member.address\r\n  \r\n}\r\n\r\n//render edit page data\r\nrenderEditPage(memberId)\r\n\r\n//edit, save and delete member details \r\nconst updateMember = (id, updates) => {\r\n  let member = newMember.find((member) => member.id === id)\r\n\r\n  if (!member) {\r\n    return\r\n  }\r\n\r\n  if (updates.firstName.length < 2 || updates.lastName.length < 2 || updates.mobileNumber.length < 10) {\r\n      alert(\"At lease enter first name, last name and mobile number\")\r\n  }  else {\r\n      member.firstName = updates.firstName\r\n      member.lastName = updates.lastName\r\n      member.mobileNumber = updates.mobileNumber\r\n      member.email = updates.email\r\n      member.dob = updates.dob\r\n      member.address = updates.address\r\n      saveMember()\r\n      alert(\"Contact saved\")\r\n  }\r\n\r\n}\r\n  \r\n//remove individual member from the array\r\n\r\nconst removeMember = (id) => {\r\n    \r\n  let memberIndex = newMember.findIndex((member) => member.id === id)\r\n  \r\n  if (memberIndex > -1) {\r\n      newMember.splice(memberIndex, 1)\r\n  }\r\n  saveMember()\r\n\r\n}\r\n\r\n//select all inputs\r\nlet allInputs = document.querySelectorAll(\".input-element\")\r\n\r\n// eventlistener for the form to save and submit details\r\ndocument.querySelector(\"#form-element\").addEventListener('submit', function (e) {\r\n    e.preventDefault()\r\n    updateMember(memberId, {\r\n      firstName: nameOneEl.value,\r\n      lastName: nameTwoEl.value,\r\n      mobileNumber: mobileNumberEl.value,\r\n      email: emailEl.value,\r\n      dob: dobEl.value,\r\n      address: addressEl.value\r\n    })\r\n    \r\n  })\r\n\r\n// eventlistener to remove contact button\r\ndocument.querySelector(\"#delete-button\").addEventListener('click', function (e) {\r\n  e.preventDefault()\r\n  removeMember(memberId)\r\n  alert(\"Contact deleted\")\r\n  document.querySelector(\"#id-heading\").innerHTML = \"\"\r\n  allInputs.forEach(singleInput => singleInput.value = '')\r\n  location.assign('/index.html')\r\n})\r\n\r\n//eventlistener for the return to home screen button\r\ndocument.querySelector(\"#return-button\").addEventListener('click', function (e) {\r\n  e.preventDefault()\r\n  localStorage.removeItem(\"getId\")\r\n  location.assign('/index.html')\r\n})"],"names":["newMember","saveMember","localStorage","setItem","JSON","stringify","loadMembers","membersJSON","getItem","parse","e","names","map","item","firstName","console","log","memberId","nameOneEl","document","querySelector","nameTwoEl","mobileNumberEl","emailEl","dobEl","addressEl","member","find","id","idElement","createPara","createElement","setAttribute","textContent","appendChild","value","lastName","mobileNumber","email","dob","address","renderEditPage","allInputs","querySelectorAll","addEventListener","preventDefault","updateMember","updates","length","alert","memberIndex","findIndex","splice","removeMember","innerHTML","forEach","singleInput","location","assign","removeItem"],"sourceRoot":""}